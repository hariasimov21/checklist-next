// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")   // pooler 6543 (app)
  directUrl = env("DIRECT_URL")     // directo 5432 (migraciones)
}

// datasource & generator como los crea prisma init
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  passwordHash  String // para Credentials
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  cards     Card[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Card {
  id        String   @id @default(cuid())
  userId    String
  title     String
  summary   String   @default("")
  tags      String[]
  createdAt DateTime @default(now())
  notes     Note[]

  attachments Attachment[]

  // ðŸ‘‡ NUEVO
  position  Int      @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, position])
}

model Note {
  id     String  @id @default(cuid())
  cardId String
  text   String
  done   Boolean @default(false)

  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

// -------- Auth.js (NextAuth v5) tablas recomendadas --------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Attachment {
  id        String   @id @default(cuid())
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  name      String
  url       String
  mime      String
  size      Int
  createdAt DateTime @default(now())
}


